// Do not modify this file!
// It was generated by the command "yarn codegen".
// Instead update the code generation logic or the OpenAPI document.

/**
 * A reference to an asset. Either the internal ID or the external ID must be provided (exactly one).
 */
export type AnnotationsAssetRef = {
    id?: number;
    externalId?: string;
};
/**
 * A plain rectangle
 */
export interface AnnotationsBoundingBox {
    /**
     * The confidence score for the primitive. It should be between 0 and 1.
     * @min 0
     * @max 1
     */
    confidence?: number;
    /**
     * Maximum abscissa of the bounding box (right edge). Must be strictly more than x_min.
     * @min 0
     * @max 1
     */
    xMax: number;
    /**
     * Minimum abscissa of the bounding box (left edge). Must be strictly less than x_max.
     * @min 0
     * @max 1
     */
    xMin: number;
    /**
     * Maximum ordinate of the bounding box (top edge). Must be strictly more than y_min.
     * @min 0
     * @max 1
     */
    yMax: number;
    /**
     * Minimum ordinate of the bounding box (bottom edge). Must be strictly less than y_max.
     * @min 0
     * @max 1
     */
    yMin: number;
}
/**
 * Models a link to a CDF Asset referenced in an image
 */
export interface AnnotationsCogniteAnnotationTypesImagesAssetLink {
    /** The asset this annotation is pointing to */
    assetRef: AnnotationsAssetRef;
    /**
     * The confidence score for the primitive. It should be between 0 and 1.
     * @min 0
     * @max 1
     */
    confidence?: number;
    /** The extracted text */
    text: string;
    /** The location of the text mentioning the asset */
    textRegion: AnnotationsBoundingBox;
}
/**
* Models an image object detection represented by a label, a geometry, and
optionally a confidence value.
*/
export interface AnnotationsObjectDetection {
    /** A plain rectangle */
    boundingBox?: AnnotationsBoundingBox;
    /**
     * The confidence score for the primitive. It should be between 0 and 1.
     * @min 0
     * @max 1
     */
    confidence?: number;
    /** The label describing what type of object it is */
    label: string;
    /**
     * A _closed_ polygon represented by _n_ vertices. In other words, we assume
     * that the first and last vertex are connected.
     */
    polygon?: AnnotationsPolygon;
    /** A polygonal chain consisting of _n_ vertices */
    polyline?: AnnotationsPolyLine;
}
/**
 * Point in a 2D-Cartesian coordinate system with origin at the top-left corner of the page
 */
export interface AnnotationsPoint {
    /**
     * The confidence score for the primitive. It should be between 0 and 1.
     * @min 0
     * @max 1
     */
    confidence?: number;
    /**
     * The abscissa of the point in a coordinate system with origin at the top-left corner of the page. Normalized in (0,1).
     * @min 0
     * @max 1
     */
    x: number;
    /**
     * The ordinate of the point in a coordinate system with origin at the top-left corner of the page. Normalized in (0,1).
     * @min 0
     * @max 1
     */
    y: number;
}
/**
* A _closed_ polygon represented by _n_ vertices. In other words, we assume
that the first and last vertex are connected.
*/
export interface AnnotationsPolygon {
    /**
     * The confidence score for the primitive. It should be between 0 and 1.
     * @min 0
     * @max 1
     */
    confidence?: number;
    vertices: AnnotationsPoint[];
}
/**
 * A polygonal chain consisting of _n_ vertices
 */
export interface AnnotationsPolyLine {
    /**
     * The confidence score for the primitive. It should be between 0 and 1.
     * @min 0
     * @max 1
     */
    confidence?: number;
    vertices: AnnotationsPoint[];
}
/**
 * Models an extracted text region in an image
 */
export interface AnnotationsTextRegion {
    /**
     * The confidence score for the primitive. It should be between 0 and 1.
     * @min 0
     * @max 1
     */
    confidence?: number;
    /** The extracted text */
    text: string;
    /** The location of the extracted text */
    textRegion: AnnotationsBoundingBox;
}
/**
 * Detect external ID or name of assets (from your CDF projects) in images. Usage of this feature requires `["assetsAcl:READ"]` capability.
 */
export type AssetTagDetection = "AssetTagDetection";
/**
 * Parameters for asset tag detection.
 */
export interface AssetTagDetectionParameters {
    /**
     * Search for external ID or name of assets that are in a subtree rooted at one of
     * the assetSubtreeIds (including the roots given).
     *
     * @example [1,2]
     */
    assetSubtreeIds?: number[];
    /**
     * Allow partial (fuzzy) matching of detected external IDs in the file.
     * Will only match when it is possible to do so unambiguously.
     *
     * @example true
     */
    partialMatch?: boolean;
    /**
     * The confidence threshold returns predictions as positive if their confidence score is the selected value or higher.
     * A higher confidence threshold increases precision but lowers recall, and vice versa.
     *
     */
    threshold?: ThresholdParameter;
}
/**
 * The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.
 * @format int64
 * @min 0
 */
export type EpochTimestamp = number;
/**
 * List of the items and the corresponding error message(s) per failed batch.
 */
export interface FailedBatch {
    /** The error message(s) of the failed batch. */
    errorMessage?: string;
    /** List of the items in the failed batch. */
    items?: VisionAllOfFileId[];
}
/**
 * Feature-specific parameters. New feature extractor parameters may appear.
 * @example {"textDetectionParameters":{"threshold":0.8},"assetTagDetectionParameters":{"threshold":0.8,"partialMatch":true,"assetSubtreeIds":[1,2]},"peopleDetectionParameters":{"threshold":0.8}}
 */
export interface FeatureParameters {
    /** Parameters for asset tag detection. */
    assetTagDetectionParameters?: AssetTagDetectionParameters;
    /** Parameters for industrial object detection. In beta. Available only when the `cdf-version: beta` header is provided. */
    industrialObjectDetectionParameters?: IndustrialObjectDetectionParameters;
    /** Parameters for people detection. */
    peopleDetectionParameters?: PeopleDetectionParameters;
    /** Parameters for industrial personal protective equipment detection. In beta. Available only when the `cdf-version: beta` header is provided. */
    personalProtectiveEquipmentDetectionParameters?: PersonalProtectiveEquipmentDetectionParameters;
    /** Parameters for text detection */
    textDetectionParameters?: TextDetectionParameters;
}
/**
 * An object containing file (external) id.
 */
export type FileReference = {
    fileId: VisionFileId;
} | {
    fileExternalId: VisionFileExternalId;
};
/**
 * Detect industrial objects such as gauges and valves in images. In beta. Available only when the `cdf-version: beta` header is provided.
 */
export type IndustrialObjectDetection = "IndustrialObjectDetection";
/**
 * Parameters for industrial object detection. In beta. Available only when the `cdf-version: beta` header is provided.
 */
export interface IndustrialObjectDetectionParameters {
    /**
     * The confidence threshold returns predictions as positive if their confidence score is the selected value or higher.
     * A higher confidence threshold increases precision but lowers recall, and vice versa.
     *
     */
    threshold?: ThresholdParameter;
}
/**
 * Contextualization job ID.
 * @format int64
 * @example 123
 */
export type JobId = number;
/**
 * The status of the job.
 */
export type JobStatus = "Queued" | "Running" | "Completed" | "Failed";
/**
 * Detect people in images.
 */
export type PeopleDetection = "PeopleDetection";
/**
 * Parameters for people detection.
 */
export interface PeopleDetectionParameters {
    /**
     * The confidence threshold returns predictions as positive if their confidence score is the selected value or higher.
     * A higher confidence threshold increases precision but lowers recall, and vice versa.
     *
     */
    threshold?: ThresholdParameter;
}
/**
 * Detect personal protective equipment, such as helmet, protective eyewear, and mask in images. In beta. Available only when the `cdf-version: beta` header is provided.
 */
export type PersonalProtectiveEquipmentDetection = "PersonalProtectiveEquipmentDetection";
/**
 * Parameters for industrial personal protective equipment detection. In beta. Available only when the `cdf-version: beta` header is provided.
 */
export interface PersonalProtectiveEquipmentDetectionParameters {
    /**
     * The confidence threshold returns predictions as positive if their confidence score is the selected value or higher.
     * A higher confidence threshold increases precision but lowers recall, and vice versa.
     *
     */
    threshold?: ThresholdParameter;
}
export interface StatusSchema {
    /** The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds. */
    createdTime: EpochTimestamp;
    /** The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds. */
    startTime: EpochTimestamp;
    /** The status of the job. */
    status: JobStatus;
    /** The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds. */
    statusTime: EpochTimestamp;
}
/**
 * Detect text in images.
 */
export type TextDetection = "TextDetection";
/**
 * Parameters for text detection
 */
export interface TextDetectionParameters {
    /**
     * The confidence threshold returns predictions as positive if their confidence score is the selected value or higher.
     * A higher confidence threshold increases precision but lowers recall, and vice versa.
     *
     */
    threshold?: ThresholdParameter;
}
/**
* The confidence threshold returns predictions as positive if their confidence score is the selected value or higher.
A higher confidence threshold increases precision but lowers recall, and vice versa.
* @min 0
* @max 1
* @example 0.8
*/
export type ThresholdParameter = number;
export interface VisionAllOfFileId {
    /** The external ID of a file in CDF. */
    fileExternalId?: VisionFileExternalId;
    /** The ID of a file in CDF. */
    fileId: VisionFileId;
}
export type VisionExtractFeature = TextDetection | AssetTagDetection | PeopleDetection | IndustrialObjectDetection | PersonalProtectiveEquipmentDetection;
export type VisionExtractGetResponse = StatusSchema & {
    jobId: JobId;
    items: VisionExtractItem[];
    failedItems?: FailedBatch[];
    parameters?: FeatureParameters;
};
export interface VisionExtractItem {
    /** The external ID of a file in CDF. */
    fileExternalId?: VisionFileExternalId;
    /** The ID of a file in CDF. */
    fileId: VisionFileId;
    /** Detected features in images. New fields may appear in case new feature extractors are add. */
    predictions: VisionExtractPredictions;
}
export type VisionExtractPostResponse = StatusSchema & {
    jobId: JobId;
    items: VisionAllOfFileId[];
    features: VisionExtractFeature[];
    parameters?: FeatureParameters;
};
/**
 * Detected features in images. New fields may appear in case new feature extractors are add.
 * @example {"textPredictions":[{"confidence":0.9,"text":"string","textRegion":{"xMin":0.5,"xMax":0.9,"yMin":0.5,"yMax":0.9}}],"assetTagPredictions":[{"confidence":0.9,"assetRef":{"id":1233},"text":"string","textRegion":{"xMin":0.5,"xMax":0.9,"yMin":0.5,"yMax":0.9}}],"peoplePredictions\"":[{"label":"person","confidence":0.8,"boundingBox":{"xMin":0.5,"xMax":0.9,"yMin":0.5,"yMax":0.9}}]}
 */
export interface VisionExtractPredictions {
    assetTagPredictions?: AnnotationsCogniteAnnotationTypesImagesAssetLink[];
    /** In beta. Available only when the `cdf-version: beta` header is provided. */
    industrialObjectPredictions?: AnnotationsObjectDetection[];
    peoplePredictions?: AnnotationsObjectDetection[];
    /** In beta. Available only when the `cdf-version: beta` header is provided. */
    personalProtectiveEquipmentPredictions?: AnnotationsObjectDetection[];
    textPredictions?: AnnotationsTextRegion[];
}
/**
 * The external ID of a file in CDF.
 * @example 1234
 */
export type VisionFileExternalId = string;
/**
 * The ID of a file in CDF.
 * @format int64
 * @example 1234
 */
export type VisionFileId = number;
