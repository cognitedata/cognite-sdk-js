// Do not modify this file!
// It was generated by the command "yarn codegen".
// Instead update the code generation logic or the OpenAPI document.

import type { CursorAndAsyncIterator } from '@cognite/sdk-core';
export type ByIdsFunctionCallsRequest = IgnoreUnknownIdsField;
export type ByIdsFunctionSchedulesRequest = FunctionScheduleIds &
  IgnoreUnknownIdsField;
/**
 * The external ID provided by the client. Must be unique for the resource type.
 * @example my.known.id
 */
export type CogniteExternalId = string;
/**
 * A server-generated ID for the object.
 * @format int64
 * @min 1
 * @max 9007199254740991
 */
export type CogniteInternalId = number;
/**
 * The number of CPU cores per function exectuion (i.e. function call).
 */
export interface CPURange {
  /**
   * The default value when creating a function.
   * @example 1
   */
  default: number;
  /**
   * The maximum value you can request when creating a function.
   * @example 1
   */
  max: number;
  /**
   * The minimum value you can request when creating a function.
   * @example 1
   */
  min: number;
}
/**
 * Cursor for paging through results.
 */
export interface Cursor {
  /** @example 4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo */
  cursor?: string;
}
/**
 * Input data to the function (only present if provided on the schedule). This data is passed deserialized into the function through one of the arguments called `data`. **WARNING:** Secrets or other confidential information should not be passed via the `data` object. There is a dedicated `secrets` object in the request body to "Create functions" for this purpose.'
 * @example {"timeSeriesId1":13435351,"maxValue":4}
 */
export type Data = object;
/**
 * The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.
 * @format int64
 * @min 0
 */
export type EpochTimestamp = number;
/**
 * Range between two timestamps (inclusive).
 */
export interface EpochTimestampRange {
  /**
   * Maximum timestamp (inclusive). The timestamp is represented as number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.
   * @format int64
   * @min 0
   */
  max?: number;
  /**
   * Minimum timestamp (inclusive). The timestamp is represented as number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.
   * @format int64
   * @min 0
   */
  min?: number;
}
export interface Function {
  /**
   * Number of CPU cores per function. Allowed range and default value are given by the [limits endpoint](https://developer.cognite.com/api#tag/Functions/operation/functionsLimits). On Azure, only the default value is used.
   * @format float
   * @example 1
   */
  cpu?: number;
  /** @example 123455234 */
  createdTime: EpochTimestamp;
  /**
   * Description of the function.
   * @example My fantastic function with advanced ML
   */
  description?: string;
  /**
   * Object with environment variables as key/value pairs. Keys can contain only letters, numbers or the underscore character. You can create at most 100 environment variables.
   * @example {"MyKey":"MyValue"}
   */
  envVars?: Record<string, string>;
  error?: FunctionBuildError;
  /** The external ID provided by the client. Must be unique for the resource type. */
  externalId?: CogniteExternalId;
  /**
   * Extra package index URLs to use when building the function, allowing for packages published in private repositories.
   * Supports basic HTTP authentication as described in [pip basic
   * authentication](https://pip.pypa.io/en/stable/topics/authentication/#basic-http-authentication).
   * See the
   * [documentation](https://docs.cognite.com/cdf/functions/#additional-arguments)
   * for additional information related to the security risks of using this
   * option.
   * @example ["https://username:password@pypi.company.com/simple","https://token@pypi.company.com/simple","https://pypi.company.com/simple"]
   */
  extraIndexUrls?: string[];
  /**
   * The file ID to a file uploaded to Cognite's Files API. This file must be a zip file and contain a file called `handler.py` in the root folder (unless otherwise specified in the `functionPath` argument). This file must contain a function named `handle` with any of the following arguments: `data`, `client`, `secrets` and `function_call_info`, which are passed into the function. The zip file can contain other files as well (model binary data, libraries etc).
   *
   * Custom packages can be pip installed by providing a requirements.txt file in the root of the zip file. The latest version of the Cognite Python SDK is automatically installed. If a specific version is needed, please specify this in the requirements.txt file.
   */
  fileId: FunctionFileId;
  /**
   * Relative path from the root folder to the file containing the `handle` function. Defaults to `handler.py`. Must be on POSIX path format.
   * @example myfunction/handler.py
   */
  functionPath?: string;
  id: CogniteInternalId;
  /**
   * Specify a different python package index, allowing for packages published in private repositories.
   * Supports basic HTTP authentication as described in [pip basic authentication](https://pip.pypa.io/en/stable/topics/authentication/#basic-http-authentication).
   * See the
   * [documentation](https://docs.cognite.com/cdf/functions/#additional-arguments)
   * for additional information related to the security risks of using this
   * option.
   * @example https://username:password@pypi.company.com/simple
   */
  indexUrl?: string;
  /**
   * Memory per function measured in GB. Allowed range and default value are given by the [limits endpoint](https://developer.cognite.com/api#tag/Functions/operation/functionsLimits). On Azure, only the default value is used.
   * @format float
   * @example 1.5
   */
  memory?: number;
  /** Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32, value 512 characters, up to 16 key-value pairs. Maximum size of entire metadata is 4096 bytes. */
  metadata?: MetaData;
  /** The name of the function. */
  name: FunctionName;
  /** Owner of this function. Typically used to know who created it. */
  owner?: FunctionOwner;
  /**
   * The runtime of the function. For exmple, runtime "py38" translates to the latest version of the Python 3.8 series.
   * @example py311
   */
  runtime?: 'py38' | 'py39' | 'py310' | 'py311';
  /**
   * The complete specification of the function runtime with major, minor and patch version numbers.
   * @example Python 3.8.13
   */
  runtimeVersion?: string;
  /**
   * Object with additional secrets as key/value pairs. These can e.g. password to simulators or other data sources. Keys must be lowercase characters, numbers or dashes (-) and at most 15 characters. You can create at most 30 secrets, all keys must be unique, and cannot be `token`, `indexUrl`, or `extraIndexUrls`. For each secret, the combined size of the secret name and secret value is limited by 25 kB. The secrets are returned scrambled if set.
   * @example {"MySecret":"***"}
   */
  secrets?: Record<string, string>;
  status: FunctionStatus;
}
/**
 * Cognite Function API error.
 */
export interface FunctionBuildError {
  /**
   * HTTP status code.
   * @format int32
   * @example 400
   */
  code: number;
  /**
   * Error message.
   * @example Could not build function.
   */
  message: string;
}
export interface FunctionCall {
  /** The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds. */
  endTime?: EpochTimestamp;
  /** Error occuring due to user's function code. */
  error?: FunctionCallError;
  /** A server-generated ID for the object. */
  functionId: CogniteInternalId;
  /** A server-generated ID for the object. */
  id: CogniteInternalId;
  /** The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds. */
  scheduledTime?: EpochTimestamp;
  /** A server-generated ID for the object. */
  scheduleId?: CogniteInternalId;
  /** The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds. */
  startTime: EpochTimestamp;
  /** Status of the function call. */
  status: FunctionCallStatus;
}
export type FunctionCalledResponse = FunctionCall;
/**
 * Error occuring due to user's function code.
 */
export interface FunctionCallError {
  /**
   * Error message.
   * @example Could not authenticate.
   */
  message: string;
  /**
   * Stack trace of exception, useful for debugging.
   * @example Cannot assign foo to bar.
   */
  trace?: string;
}
export interface FunctionCallFilter {
  /** FunctionCallFilter */
  filter?: {
    scheduleId?: CogniteInternalId;
    status?: FunctionCallStatus;
    startTime?: EpochTimestampRange;
    endTime?: EpochTimestampRange;
  };
}
export type FunctionCallListScope = FunctionCallFilter & LimitList & Cursor;
export type FunctionCallListWithCursorResponse = FunctionCallsWithCursor;
export interface FunctionCallLogEntry {
  /**
   * Single line from stdout / stderr.
   * @example Did something great
   */
  message?: string;
  /** The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds. */
  timestamp?: EpochTimestamp;
}
export interface FunctionCallLogResponse {
  items: FunctionCallLogEntry[];
}
export interface FunctionCallRequest {
  // biome-ignore lint/suspicious/noExplicitAny: couldn't find correct type definition.
  data?: any;
  // biome-ignore lint/suspicious/noExplicitAny: couldn't find correct type definition.
  nonce: any;
}
/**
 * The function response.
 */
export interface FunctionCallResponse {
  /** A server-generated ID for the object. */
  callId: CogniteInternalId;
  /** A server-generated ID for the object. */
  functionId: CogniteInternalId;
  response?: object;
}
/**
 * Status of the function call.
 * @example Running
 */
export type FunctionCallStatus = 'Running' | 'Completed' | 'Failed' | 'Timeout';
export interface FunctionCallsWithCursor
  extends CursorAndAsyncIterator<FunctionCall> {}
export type FunctionDeleteRequest = {
  items: FunctionIdEither[];
} & IgnoreUnknownIdsField;
/**
 * The external ID of the function. Should be unique for the project.
 */
export interface FunctionExternalId {
  /** The external ID provided by the client. Must be unique for the resource type. */
  externalId: CogniteExternalId;
}
/**
* The file ID to a file uploaded to Cognite's Files API. This file must be a zip file and contain a file called `handler.py` in the root folder (unless otherwise specified in the `functionPath` argument). This file must contain a function named `handle` with any of the following arguments: `data`, `client`, `secrets` and `function_call_info`, which are passed into the function. The zip file can contain other files as well (model binary data, libraries etc).

Custom packages can be pip installed by providing a requirements.txt file in the root of the zip file. The latest version of the Cognite Python SDK is automatically installed. If a specific version is needed, please specify this in the requirements.txt file.
*/
export type FunctionFileId = CogniteInternalId;
export interface FunctionFilter {
  /** FunctionFilter */
  filter?: {
    name?: FunctionName;
    owner?: FunctionOwner;
    fileId?: FunctionFileId;
    status?: FunctionStatus;
    externalIdPrefix?: CogniteExternalId;
    createdTime?: EpochTimestampRange;
    metadata?: MetaData;
  };
}
/**
 * The ID of the function.
 */
export interface FunctionId {
  /** A server-generated ID for the object. */
  id: CogniteInternalId;
}
export type FunctionIdEither = FunctionId | FunctionExternalId;
export interface FunctionListResponse {
  items: Function[];
}
export type FunctionListScope = FunctionFilter & LimitList;
/**
 * The name of the function.
 * @example myfunction
 */
export type FunctionName = string;
/**
 * Owner of this function. Typically used to know who created it.
 * @example user@cognite.com
 */
export type FunctionOwner = string;
export interface FunctionsActivationResponse {
  /** Signifies whether Cognite Functions have been requested or activated for the project. Set to inactive by default. */
  status: 'inactive' | 'requested' | 'activated';
}
export type FunctionSchedule = {
  id?: CogniteInternalId;
  name?: FunctionScheduleName;
  createdTime?: EpochTimestamp;
  description?: FunctionScheduleDescription;
  cronExpression?: FunctionScheduleCronExpression;
  when?: FunctionScheduleWhen;
  functionId?: CogniteInternalId;
  functionExternalId?: CogniteExternalId;
  sessionId?: SessionId;
  // biome-ignore lint/suspicious/noExplicitAny: couldn't find correct type definition.
  data?: any;
  // biome-ignore lint/suspicious/noExplicitAny: couldn't find correct type definition.
  nonce?: any;
};
/**
 * Cron expression describes when the function should be called. Use http://www.cronmaker.com to create a cron expression.
 * @example * * * * *
 */
export type FunctionScheduleCronExpression = string;
export interface FunctionScheduleDataResponse {
  // biome-ignore lint/suspicious/noExplicitAny: couldn't find correct type definition.
  data?: any;
  /** A server-generated ID for the object. */
  id: CogniteInternalId;
}
/**
 * Description of function schedule.
 * @example This is a nice schedule
 */
export type FunctionScheduleDescription = string;
/**
 * The ID of the function schedule.
 */
export interface FunctionScheduleId {
  /** A server-generated ID for the object. */
  id: CogniteInternalId;
}
export interface FunctionScheduleIdArray {
  items: FunctionScheduleId[];
}
export type FunctionScheduleIds = {
  items: {
    id: CogniteInternalId;
  }[];
};
export interface FunctionScheduleListResponse {
  items: FunctionSchedule[];
}
/**
 * Name of function schedule.
 * @example My schedule
 */
export type FunctionScheduleName = string;
/**
 * When the schedule will trigger, in human readable text.
 * @example Every hour
 */
export type FunctionScheduleWhen = string;
export interface FunctionsLimitsResponse {
  /** The number of CPU cores per function exectuion (i.e. function call). */
  cpuCores: CPURange;
  /** The amount of available memory in GB per function execution (i.e. function call). */
  memoryGb: MemoryRange;
  /**
   * Maximum response size of function calls.
   * @example 1
   */
  responseSizeMb: number;
  /**
   * Available runtimes. For example, runtime "py38" translates to the latest version of the Python 3.8 series.
   * @example ["py38","py39","py310","py311"]
   */
  runtimes: string[];
  /**
   * Timeout of each function call.
   * @example 9
   */
  timeoutMinutes: number;
}
/**
 * Status of the function. It starts in a Queued state, is then Deploying before it is either Ready or Failed. If the function is Ready, it can be called.
 * @example Queued
 */
export type FunctionStatus = 'Queued' | 'Deploying' | 'Ready' | 'Failed';
export interface IgnoreUnknownIdsField {
  /** Ignore IDs and external IDs that are not found */
  ignoreUnknownIds?: boolean;
}
export interface LimitList {
  /**
   * Limits the number of results to be returned.
   * @format int32
   * @min 1
   */
  limit?: number;
}
/**
 * The amount of available memory in GB per function execution (i.e. function call).
 */
export interface MemoryRange {
  /**
   * The default value when creating a function.
   * @example 1.5
   */
  default: number;
  /**
   * The maximum value you can request when creating a function.
   * @example 1.5
   */
  max: number;
  /**
   * The minimum value you can request when creating a function.
   * @example 1.5
   */
  min: number;
}
/**
 * Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32, value 512 characters, up to 16 key-value pairs. Maximum size of entire metadata is 4096 bytes.
 */
export type MetaData = Record<string, string>;
/**
 * Nonce retrieved from sessions API when creating a session. This will be used to bind the session before executing the function. The corresponding access token will be passed to the function and used to instantiate the client of the handle() function. You can create a session via the [Sessions API](#operation/createSessions). When using the Python SDK, the session will be created behind the scenes when creating the schedule.
 */
export type Nonce = string;
export interface PostFunctionSchedulesRequest {
  items: FunctionSchedule[];
}
export interface PostFunctionsRequest {
  /** Array of functions to create. */
  items: Function[];
}
/**
 * Id of the session.
 */
export type SessionId = string;
