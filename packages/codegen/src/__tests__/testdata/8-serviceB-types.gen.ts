// Do not modify this file!
// It was generated by the command "yarn codegen".
// Instead update the code generation logic or the OpenAPI document.

import { CursorAndAsyncIterator } from "@cognite/sdk-core";
export interface Function {
    id: CogniteInternalId;
    /** @example 123455234 */
    createdTime: EpochTimestamp;
    status: FunctionStatus;
    /** The name of the function. */
    name: FunctionName;
    /** External Id provided by client. Should be unique within a given project/resource combination. */
    externalId?: CogniteExternalId;
    /**
     * The file ID to a file uploaded to Cognite's Files API. This file must be a zip file and contain a file called `handler.py` (unless otherwise specified through the `functionPath` argument). This file must contain a function named `handle` with any of the following arguments: `data`, `client`, `secrets` and `function_call_info`, which are passed into the function. The zip file can contain other files as well (model binary data, libraries etc).
     *
     * Custom packages can be pip installed by providing a requirements.txt file in the root of the zip file. The latest version of the Cognite Python SDK is automatically installed. If a specific version is needed, please specify this in the requirements.txt file.
     */
    fileId: FunctionFileId;
    /** Owner of this function. Typically used to know who created it. */
    owner?: FunctionOwner;
    /**
     * Description of the function.
     * @example My fantastic function with advanced ML
     */
    description?: string;
    /** Custom, application specific metadata. String key -> String value. Limits: Maximum length of key is 32, value 512 characters, up to 16 key-value pairs. Maximum size of entire metadata is 4096 bytes. */
    metadata?: Record<string, string>;
    /**
     * (Deprecated) API key that can be used inside the function to access data in CDF. This is deprecated and will be replaced by OIDC tokens. With OIDC tokens, a session is created on behalf of the user/service principal at the point when either (1) the function is called directly, or (2) when a schedule is created for the function.
     * @example ***
     */
    apiKey?: string;
    /**
     * Object with additional secrets as key/value pairs. These can e.g. password to simulators or other data sources. Keys must be lowercase characters, numbers or dashes (-) and at most 15 characters. You can create at most 30 secrets, all keys must be unique, and cannot be `apikey`, `indexUrl` or `extraIndexUrls`.
     * @example {"MySecret":"***"}
     */
    secrets?: object;
    /**
     * Relative path from the root folder to the file containing the `handle` function. Defaults to `handler.py`. Must be on POSIX path format.
     * @example myfunction/handler.py
     */
    functionPath?: string;
    /**
     * Object with environment variables as key/value pairs. Keys can contain only letters, numbers or the underscore character. You can create at most 100 environment variables.
     * @example {"MyKey":"MyValue"}
     */
    envVars?: object;
    /**
     * Number of CPU cores per function (not available in Azure). Defaults to 0.25. Allowed values are in the range [0.1, 0.6].
     * @format float
     */
    cpu?: number;
    /**
     * Memory per function measured in GB (not available in Azure). Defaults to 1. Allowed values are in the range [0.1, 2.5].
     * @format float
     */
    memory?: number;
    /**
     * The runtime of the function. Runtime "py3x" translates to the latest version of the Python 3.x.y series.
     * @example py38
     */
    runtime?: "py37" | "py38" | "py39";
    error?: FunctionBuildError;
    /**
     * Specify a different python package index, allowing for packages published in private repositories.
     * Supports basic HTTP authentication as described in [pip basic authentication](https://pip.pypa.io/en/stable/topics/authentication/#basic-http-authentication).
     * See the
     * [documentation](https://docs.cognite.com/cdf/functions/#additional-arguments)
     * for additional information related to the security risks of using this
     * option.
     * @example https://username:password@pypi.company.com/simple
     */
    indexUrl?: string;
    /**
     * Extra package index URLs to use when building the function, allowing for packages published in private repositories.
     * Supports basic HTTP authentication as described in [pip basic
     * authentication](https://pip.pypa.io/en/stable/topics/authentication/#basic-http-authentication).
     * See the
     * [documentation](https://docs.cognite.com/cdf/functions/#additional-arguments)
     * for additional information related to the security risks of using this
     * option.
     * @example ["https://username:password@pypi.company.com/simple","https://token@pypi.company.com/simple","https://pypi.company.com/simple"]
     */
    extraIndexUrls?: string[];
}
export type FunctionListScope = FunctionFilter & LimitList;
export interface FunctionDeleteRequest {
    items: FunctionIdEither[];
}
export interface FunctionCallRequest {
    data?: any;
    nonce?: any;
}
export type FunctionCallIds = {
    items: FunctionCallId[];
};
export interface IgnoreUnknownIdsField {
    /** Ignore IDs that are not found */
    ignoreUnknownIds?: boolean;
}
export interface FunctionCall {
    /** A server-generated ID for the object. */
    id: CogniteInternalId;
    /** Status of the function call. */
    status: FunctionCallStatus;
    /** The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds. */
    startTime: EpochTimestamp;
    /** The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds. */
    endTime?: EpochTimestamp;
    /** Error occuring due to user's function code. */
    error?: FunctionCallError;
    /** A server-generated ID for the object. */
    scheduleId?: CogniteInternalId;
    /** A server-generated ID for the object. */
    functionId: CogniteInternalId;
    /** The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds. */
    scheduledTime?: EpochTimestamp;
}
/**
 * Cognite Function API error.
 */
export interface FunctionErrorBasic {
    /**
     * HTTP status code.
     * @format int32
     * @example 400
     */
    code: number;
    /**
     * Error message.
     * @example Could not authenticate.
     */
    message: string;
}
/**
 * A server-generated ID for the object.
 * @format int64
 * @min 1
 * @max 9007199254740991
 */
export type CogniteInternalId = number;
/**
 * Status of the function call.
 * @example Running
 */
export type FunctionCallStatus = "Running" | "Completed" | "Failed" | "Timeout";
/**
 * The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.
 * @format int64
 * @min 0
 * @example 1638795554528
 */
export type EpochTimestamp = number;
/**
 * Error occuring due to user's function code.
 */
export interface FunctionCallError {
    /**
     * Stack trace of exception, useful for debugging.
     * @example Cannot assign foo to bar.
     */
    trace?: string;
    /**
     * Error message.
     * @example Could not authenticate.
     */
    message: string;
}
export interface FunctionCalls {
    items: FunctionCall[];
}
export interface FunctionCallId {
    /** A server-generated ID for the object. */
    id: CogniteInternalId;
}
export interface FunctionCallsWithCursor extends CursorAndAsyncIterator<FunctionCall> {
}
/**
 * Input data to the function. This data is passed deserialized into the function through one of the arguments called `data`. **WARNING:** Secrets or other confidential information should not be passed via the `data` object. There is a dedicated `secrets` object in the request body to "Create functions" for this purpose.'
 * @example {"timeSeriesId1":13435351,"maxValue":4}
 */
export type Data = object;
/**
 * Nonce retrieved from sessions API when creating a session. This will be used to bind the session before executing the function.
 */
export type Nonce = string;
export type FunctionIdEither = FunctionId | FunctionExternalId;
/**
 * The ID of the function.
 */
export interface FunctionId {
    /** A server-generated ID for the object. */
    id: CogniteInternalId;
}
/**
 * The external ID of the function. Should be unique for the project.
 */
export interface FunctionExternalId {
    /** External Id provided by client. Should be unique within a given project/resource combination. */
    externalId: CogniteExternalId;
}
/**
 * External Id provided by client. Should be unique within a given project/resource combination.
 */
export type CogniteExternalId = string;
export interface FunctionFilter {
    /** FunctionFilter */
    filter?: {
        name?: FunctionName;
        owner?: FunctionOwner;
        fileId?: FunctionFileId;
        status?: FunctionStatus;
        externalIdPrefix?: CogniteExternalId;
        createdTime?: EpochTimestamp;
    };
}
export interface LimitList {
    /**
     * Limits the number of results to be returned.
     * @format int32
     * @min 1
     */
    limit?: number;
}
/**
 * The name of the function.
 * @example myfunction
 */
export type FunctionName = string;
/**
 * Owner of this function. Typically used to know who created it.
 * @example anders.hafreager@cognite.com
 */
export type FunctionOwner = string;
/**
* The file ID to a file uploaded to Cognite's Files API. This file must be a zip file and contain a file called `handler.py` (unless otherwise specified through the `functionPath` argument). This file must contain a function named `handle` with any of the following arguments: `data`, `client`, `secrets` and `function_call_info`, which are passed into the function. The zip file can contain other files as well (model binary data, libraries etc).

Custom packages can be pip installed by providing a requirements.txt file in the root of the zip file. The latest version of the Cognite Python SDK is automatically installed. If a specific version is needed, please specify this in the requirements.txt file.
*/
export type FunctionFileId = CogniteInternalId;
/**
 * Status of the function. It starts in a Queued state, is then Deploying before it is either Ready or Failed. If the function is Ready, it can be called.
 * @example Queued
 */
export type FunctionStatus = "Queued" | "Deploying" | "Ready" | "Failed";
/**
 * The number of CPU cores per function exectuion (i.e. function call).
 */
export interface CPURange {
    /**
     * The minimum value you can request when creating a function.
     * @example 0.1
     */
    min: number;
    /**
     * The maximum value you can request when creating a function.
     * @example 0.6
     */
    max: number;
    /**
     * The default value when creating a function.
     * @example 0.25
     */
    default: number;
}
/**
 * The amount of available memory in GB per function execution (i.e. function call).
 */
export interface MemoryRange {
    /**
     * The minimum value you can request when creating a function.
     * @example 0.1
     */
    min: number;
    /**
     * The maximum value you can request when creating a function.
     * @example 2.5
     */
    max: number;
    /**
     * The default value when creating a function.
     * @example 1
     */
    default: number;
}
/**
 * Cognite Function API error.
 */
export interface FunctionBuildError {
    /**
     * HTTP status code.
     * @format int32
     * @example 400
     */
    code: number;
    /**
     * Error message.
     * @example Could not build function.
     */
    message: string;
}
export interface FunctionListResponse {
    items: Function[];
}
export interface FunctionErrorResponse {
    /** Cognite Function API error. */
    error: FunctionErrorBasic;
}
export interface FunctionsLimitsResponse {
    /**
     * Timeout of each function call.
     * @example 15
     */
    timeoutMinutes: number;
    /** The number of CPU cores per function exectuion (i.e. function call). */
    cpuCores: CPURange;
    /** The amount of available memory in GB per function execution (i.e. function call). */
    memoryGb: MemoryRange;
    /** Available runtimes. Runtime "py3x" translates to the latest version of the Python 3.x.y series. */
    runtimes: string[];
    /**
     * Maximum response size of function calls.
     * @example 1
     */
    responseSizeMb: number;
}
export type FunctionCalledResponse = FunctionCall;
export type FunctionCallListWithCursorResponse = FunctionCallsWithCursor;
export type FunctionCallListResponse = FunctionCalls;
export interface LimitQueryQueryParameter {
    /** @min 1 */
    limit?: number;
}
export interface CursorQueryParameter {
    /** @example 4zj0Vy2fo0NtNMb229mI9r1V3YG5NBL752kQz1cKtwo */
    cursor?: string;
}
