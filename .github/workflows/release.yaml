name: CD

on:
  push:
    branches:
      - master
      - 'release-*'

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('package.json') }}

      - name: Install ðŸ”§
        run: yarn install --immutable

      - name: Build
        run: yarn build

  #--------------------------------------------------------------------------------------------------------------------
  # (if the commit message of the PR not containing the [skip-ci])
  #   And 
  #     - (if it is merge to master AND (contains [release] OR chore(release) in the commit message of the PR))
  #        OR
  #     - (if it is merge to release- branch AND (contain feat OR fix OR [release] tag in commit message)
  # Above condition will trigger publish workflow
  #--------------------------------------------------------------------------------------------------------------------
  publish:
    if: |
        !contains(github.event.head_commit.message, '[skip-ci]') && 
        ( 
            (
              github.ref == 'refs/heads/master' && 
                ( 
                  contains(github.event.head_commit.message, '[release]') || 
                  startsWith(github.event.head_commit.message, 'chore(release)') 
                )
            ) || 
          (
            startsWith(github.ref, 'refs/heads/release-') && 
            (
              startsWith(github.event.head_commit.message, 'feat:') || 
              startsWith(github.event.head_commit.message, 'feat('
            )|| 
            (
              startsWith(github.event.head_commit.message, 'fix:') || 
              startsWith(github.event.head_commit.message, 'fix(')
            ) || 
            contains(github.event.head_commit.message, '[release]') )
          )
        )
    runs-on: ubuntu-latest
    environment: CD
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node_modules
        id: cache-modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('package.json') }}

      - name: Install dependencies ðŸ”§
        run: yarn install --immutable

      - name: Build
        run: yarn build

      - name: Build doc
        run: yarn docs:bundle


      #--------------------------------------------------------------------------------------------------------------------
      # 01. Configure the NPM access and GitHub access
      #--------------------------------------------------------------------------------------------------------------------
      - name: Configure Git & NPM
        env:
          GH_LERNA_TOKEN:    ${{ secrets.GH_LERNA_TOKEN }}
          NPM_PUBLISH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          git config user.email "cognite-cicd@users.noreply.github.com"
          git config user.name  "Cognite CICD"
          git remote set-url origin "https://${{ secrets.GH_LERNA_TOKEN }}@github.com/${{ github.repository }}.git"
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_PUBLISH_TOKEN }}" >> .npmrc
      

      #--------------------------------------------------------------------------------------------------------------------
      # 02. Remove RC tag
      #       - If a PR merge message to master contains 'Merge pull request' AND
      #       - 'release-' AND
      #       - '[release]' AND
      #       - Not the commit made by the CD github workflow to push the changelog  
      #     Then this will proceed
      #--------------------------------------------------------------------------------------------------------------------
      - name: Remove RC suffix from version
        if: |
          github.ref == 'refs/heads/master' &&
          contains(github.event.head_commit.message, 'Merge pull request') &&
          contains(github.event.head_commit.message, 'release-') &&
          contains(github.event.head_commit.message, '[release]') &&
          !contains(github.event.head_commit.message, 'chore(release): Release after updating changelog [release]')
        run: |
          echo "Remove "-rc.X" from package versions on master after RC branch merge"
          node scripts/remove-rc-tags.js
          git add packages/*/package.json
          git commit -m "chore: remove RC tags (from release branch merge)"

          
      #--------------------------------------------------------------------------------------------------------------------
      # 03. Bump version using Lerna without pushing directly to master
      #     - Senario 01:
      #          - If the PR is from master branch and Not the PR create by the CD github workflow
      #             - If the commit message of the PR to the master contains 
      #                  - Merge pull request AND release- AND [release] in the current commit OR 
      #                  - Merge pull request AND release- AND [release] in the previous commit (when rc branch merge to master)
      #                  - Then perform major release based on conventional commits versioning
      #             - elif it is PR with [release] commit msg to master do minor release
      #          - elif this is a release branch perform rc version update no push
      #--------------------------------------------------------------------------------------------------------------------
      - name: Bump version with Lerna
        env:
          GH_LERNA_TOKEN:    ${{ secrets.GH_LERNA_TOKEN }}
          NPM_PUBLISH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          EVENT_JSON=$(cat "${GITHUB_EVENT_PATH}")
          HEAD_MSG=$(echo "$EVENT_JSON" | jq -r '.head_commit.message')
          MERGE_MSG=$(echo "$EVENT_JSON" | jq -r '.commits[-1].message')

          echo "Head message -> ${HEAD_MSG}"
          echo "Merge message -> ${MERGE_MSG}"

          if [[ "${GITHUB_REF}" == "refs/heads/master" ]] && [[ "$HEAD_MSG" != *"chore(release): Release after updating changelog [release]"* ]]; then
            echo "On master, checking release merge or manual release..."
            if ( [[ "$HEAD_MSG" == *"Merge pull request"* && "$HEAD_MSG" == *"release-"* && "$HEAD_MSG" == *"[release]"* ]] \
              || [[ "$MERGE_MSG" == *"Merge pull request"* && "$MERGE_MSG" == *"release-"* && "$MERGE_MSG" == *"[release]"* ]] ); then
              echo "Detected release- branch merge; doing major bump"
              yarn lerna version major --conventional-commits --yes --no-push
            elif [[ "$HEAD_MSG" == *"[release]"* ]]; then
              echo "Manual release commit; doing standard bump"
              yarn lerna version --conventional-commits --yes --no-push
            else
              echo "No version bump needed"
            fi

          elif [[ "${GITHUB_REF}" == refs/heads/release-* ]]; then
            echo "On release- branch; doing prerelease bump"
            yarn lerna version --conventional-commits --conventional-prerelease --preid rc --yes --no-push
          fi
     

      #--------------------------------------------------------------------------------------------------------------------
      # 04. Push release changes using seperate branch
      #     - If in a master branch create seperate release branch to push tags
      #     - elif in release- branch just push tags
      #--------------------------------------------------------------------------------------------------------------------
      - name: Push release changes
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/master" ]]; then
            echo "Create a new branch for the version bump PR"
            releaseBranch="release-bump-${{ github.run_id }}"
            git checkout -b "$releaseBranch"
            echo "Include tags when pushing (Lerna has created tags locally with --no-push)"
            git push origin "$releaseBranch" --follow-tags
          elif [[ "${GITHUB_REF}" == refs/heads/release-* ]]; then
            echo "On release branch, push changes (including tags) back to origin"
            git push origin "${GITHUB_REF#refs/heads/}" --follow-tags
          fi     
          
      #--------------------------------------------------------------------------------------------------------------------
      # 05. Create a release PR
      #     - If from master and not a CD workflow created PR
      #--------------------------------------------------------------------------------------------------------------------
      - name: Create release PR
        if: |
            github.ref == 'refs/heads/master' &&
            !contains(github.event.head_commit.message, 'chore(release): Release after updating changelog [release]')
        env:
          GH_LERNA_TOKEN:    ${{ secrets.GH_LERNA_TOKEN }}
          NPM_PUBLISH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          gh pr create --base master --head "$releaseBranch" \
            --title "chore(release): Release after updating changelog [release]" \
            --body "ðŸ¤– **Automated PR** Version bump and changelog for new release. Please review and merge to publish."   

      #--------------------------------------------------------------------------------------------------------------------
      # 05. Publish to NPM 
      #     - If from release- OR from a CD workflow created PR to master
      #          - If from master publish as normal package
      #          - If from release- publish as rc
      #--------------------------------------------------------------------------------------------------------------------
      - name: Publish to NPM
        if: |
          startsWith(github.ref, 'refs/heads/release-') || 
          (
            contains(github.event.head_commit.message, 'chore(release): Release after updating changelog [release]') &&
            github.ref == 'refs/heads/master' 
          )
        env:
          GH_LERNA_TOKEN:    ${{ secrets.GH_LERNA_TOKEN }}
          NPM_PUBLISH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/master" ]]; then
            echo "Publishing final release to NPMâ€¦"
            yarn lerna publish from-package --yes --no-git-reset
          elif [[ "${GITHUB_REF}" == refs/heads/release-* ]]; then
            echo "Publishing pre-release (rc) to NPMâ€¦"
            yarn lerna publish from-package --pre-dist-tag rc --yes --no-git-reset
          fi
